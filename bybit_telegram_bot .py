
import streamlit as st
import asyncio
import aiohttp
import pandas as pd
import time
import os

# ==========================================================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==========================================================
REFRESH_INTERVAL = 10  # —Å–µ–∫—É–Ω–¥
CSV_LOG_FILE = "arbitrage_log.csv"

EXCHANGES = {
    "Binance": "https://api.binance.com/api/v3/ticker/bookTicker?symbol={}",
    "Bybit": "https://api.bybit.com/v5/market/tickers?category=spot&symbol={}",
    "OKX": "https://www.okx.com/api/v5/market/ticker?instId={}-USDT",
    "KuCoin": "https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={}",
    "Bitget": "https://api.bitget.com/api/v2/spot/market/ticker?symbol={}_SPBL"
}

# ==========================================================
# üì° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
# ==========================================================
async def fetch_price(session, name, url):
    try:
        async with session.get(url, timeout=5) as resp:
            data = await resp.json()
            if name == "Binance":
                return name, float(data["bidPrice"]), float(data["askPrice"])
            elif name == "Bybit":
                t = data["result"]["list"][0]
                return name, float(t["bid1Price"]), float(t["ask1Price"])
            elif name == "OKX":
                t = data["data"][0]
                return name, float(t["bidPx"]), float(t["askPx"])
            elif name == "KuCoin":
                t = data["data"]
                return name, float(t["bestBid"]), float(t["bestAsk"])
            elif name == "Bitget":
                t = data["data"][0]
                return name, float(t["buyOne"]), float(t["sellOne"])
    except Exception:
        return name, None, None

async def get_prices(symbol):
    tasks = []
    async with aiohttp.ClientSession() as session:
        for name, url in EXCHANGES.items():
            if name == "OKX":
                formatted = symbol.replace("USDT", "")
            elif name == "Bitget":
                formatted = symbol.replace("USDT", "USDT")
            else:
                formatted = symbol
            tasks.append(fetch_price(session, name, url.format(formatted)))
        results = await asyncio.gather(*tasks)
    return {name: (bid, ask) for name, bid, ask in results if bid and ask}

# ==========================================================
# üìä –†–∞—Å—á—ë—Ç —Å–ø—Ä–µ–¥–æ–≤
# ==========================================================
def calculate_spreads(prices, symbol):
    rows = []
    exchanges = list(prices.keys())
    for buy_ex in exchanges:
        for sell_ex in exchanges:
            if buy_ex == sell_ex:
                continue
            buy_price = prices[buy_ex][1]  # ask
            sell_price = prices[sell_ex][0]  # bid
            spread = (sell_price - buy_price) / buy_price * 100
            if spread > 0:
                rows.append({
                    "–ú–æ–Ω–µ—Ç–∞": symbol,
                    "–ö—É–ø–∏—Ç—å –Ω–∞": buy_ex,
                    "–ü—Ä–æ–¥–∞—Ç—å –Ω–∞": sell_ex,
                    "Buy —Ü–µ–Ω–∞": round(buy_price, 2),
                    "Sell —Ü–µ–Ω–∞": round(sell_price, 2),
                    "–°–ø—Ä–µ–¥ %": round(spread, 3),
                    "–í—Ä–µ–º—è": time.strftime('%H:%M:%S')
                })
    df = pd.DataFrame(rows)
    if not df.empty:
        df = df.sort_values("–°–ø—Ä–µ–¥ %", ascending=False)
    return df

# ==========================================================
# üßæ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ CSV
# ==========================================================
def log_to_csv(df):
    if df.empty:
        return
    file_exists = os.path.isfile(CSV_LOG_FILE)
    df.to_csv(CSV_LOG_FILE, mode='a', index=False, header=not file_exists, encoding='utf-8-sig')

# ==========================================================
# üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# ==========================================================
st.set_page_config(page_title="Arbitrage Monitor", layout="wide")
st.title("üí∞ Real-Time Crypto Arbitrage Monitor")

# –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç
default_symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT"]
symbols = st.multiselect(
    "–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
    options=default_symbols + ["BNBUSDT", "DOGEUSDT", "ADAUSDT", "TONUSDT"],
    default=default_symbols
)

st.write(f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {REFRESH_INTERVAL} —Å–µ–∫—É–Ω–¥.")
placeholder = st.empty()

while True:
    start = time.time()
    all_data = []
    for symbol in symbols:
        prices = asyncio.run(get_prices(symbol))
        df_spreads = calculate_spreads(prices, symbol)
        if not df_spreads.empty:
            all_data.append(df_spreads)

    st.markdown(f"**üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {time.strftime('%H:%M:%S')}")

    if all_data:
        result = pd.concat(all_data)
        log_to_csv(result)

        # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–æ–≤
        def color_spread(val):
            if val >= 0.5:
                color = 'background-color: #00FF00; color: black'  # —è—Ä–∫–æ-–∑–µ–ª—ë–Ω—ã–π
            elif val >= 0.2:
                color = 'background-color: #90EE90; color: black'  # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
            else:
                color = ''
            return color

        styled_df = result.style.applymap(color_spread, subset=["–°–ø—Ä–µ–¥ %"])
        st.dataframe(styled_df, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")

    time.sleep(REFRESH_INTERVAL)
